//
// Copyright Â© 2021 BrightPattern. All rights reserved. 
    

import Foundation

/// Provides chat and voice interactions.
/// This API can be used for development of rich contact applications, such as customer-facing mobile and web applications for advanced chat, voice, and video communications with Bright Pattern Contact Center-based contact centers.
/// Sends "poll" request to the backend repeatedly for get new chat events. The chat events are received through ```delegate```
public protocol ContactCenterCommunicating {
    // MARK: - Initialization
    /// Base URL to make requests
    var baseURL: URL { get }
    /// Identifies your contact center.
    /// It corresponds to the domain name of your contact center that you see in the upper right corner of the Contact Center Administrator application after login.
    var tenantURL: URL { get }
    /// Unique identifier of the Messaging/Chat scenario entry that will be used to associate your application with a specific scenario
    var appID: String { get }
    /// Unique identifier of the client application. It is used to identify communication sessions of a particular instance of the mobile application (i.e., of a specific mobile device).
    /// It must be generated by the mobile application in the UUID format. If clientId is set to WebChat, HTTP cookies will be used for client identification.
    var clientID: String { get }
    // MARK: - Client events delegate
    /// Chat event delegate
    /// If successful returns an array of chat events [ContactCenterClientEvent](x-source-tag://ContactCenterClientEvent) for the current session that came from the server or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    var delegate: ((Result<[ContactCenterClientEvent], Error>) -> Void)? { get set }
    // MARK:- Chat
    /// Checks the current status of configured services
    /// - Parameters:
    ///   - completion: Current status [ContactCenterServiceAvailability](x-source-tag://ContactCenterServiceAvailability) of configured services if successful or [ContactCenterError](x-source-tag://ContactCenterError) otherwise
    func checkAvailability(with completion: @escaping ((Result<ContactCenterServiceAvailability, Error>) -> Void))
}
